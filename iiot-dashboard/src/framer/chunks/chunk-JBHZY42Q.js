// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 28f3299f349ba0ff "Sense View Web App", do not edit manually */
import {
  stdin_default
} from "./chunk-SBVXWYNT.js";

// /:https://framerusercontent.com/modules/g8lCRFHaN4SM02WZEAw2/2eI1oU1BIdUwEAB7XLch/sn8JDvU5k.js
import { jsx as _jsx } from "react/jsx-runtime";
import { addFonts, addPropertyControls, ComponentViewportProvider, ControlType, cx, getFonts, SmartComponentScopedContainer, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var IconCalendarFonts = getFonts(stdin_default);
var enabledGestures = { Y9pcKf3kn: { hover: true } };
var cycleOrder = ["Y9pcKf3kn", "z1XbdPzvP"];
var serializationHash = "framer-iGcoV";
var variantClassNames = { Y9pcKf3kn: "framer-v-1b1e2q5", z1XbdPzvP: "framer-v-thrvl4" };
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach((variant) => variant && Object.assign(nextOverrides, overrides[variant]));
  return nextOverrides;
}
var transition1 = { bounce: 0.2, delay: 0, duration: 0.4, type: "spring" };
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition = value ?? config.transition;
  const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)]);
  return /* @__PURE__ */ _jsx(MotionConfigContext.Provider, { value: contextValue, children });
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = { Active: "Y9pcKf3kn", Unactive: "z1XbdPzvP" };
var getProps = ({ click, height, id, width, ...props }) => {
  return { ...props, UrHpEVdQk: click ?? props.UrHpEVdQk, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "Y9pcKf3kn" };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency) return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  const fallbackRef = useRef(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React.useId();
  const { activeLocale, setLocale } = useLocaleInfo();
  const componentViewport = useComponentViewport();
  const { style, className, layoutId, variant, UrHpEVdQk, ...restProps } = getProps(props);
  const { baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants } = useVariantState({ cycleOrder, defaultVariant: "Y9pcKf3kn", enabledGestures, ref: refBinding, variant, variantClassNames });
  const layoutDependency = createLayoutDependency(props, variants);
  const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant);
  const onTap1crfpmw = activeVariantCallback(async (...args) => {
    setGestureState({ isPressed: false });
    if (UrHpEVdQk) {
      const res = await UrHpEVdQk(...args);
      if (res === false) return false;
    }
  });
  const sharedStyleClassNames = [];
  const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
  return /* @__PURE__ */ _jsx(LayoutGroup, { id: layoutId ?? defaultLayoutId, children: /* @__PURE__ */ _jsx(Variants, { animate: variants, initial: false, children: /* @__PURE__ */ _jsx(Transition, { value: transition1, children: /* @__PURE__ */ _jsx(motion.div, { ...restProps, ...gestureHandlers, className: cx(scopingClassNames, "framer-1b1e2q5", className, classNames), "data-framer-name": "Active", "data-highlight": true, layoutDependency, layoutId: "Y9pcKf3kn", onTap: onTap1crfpmw, ref: refBinding, style: { backgroundColor: "var(--token-aa304e64-8f1c-4e9a-a74f-03393a864335, rgb(8, 122, 162))", borderBottomLeftRadius: 12, borderBottomRightRadius: 12, borderTopLeftRadius: 12, borderTopRightRadius: 12, opacity: 1, ...style }, variants: { "Y9pcKf3kn-hover": { backgroundColor: "var(--token-32419dcf-b78f-49f7-8898-145e2bf81fbf, rgb(0, 165, 207))", opacity: 1 }, z1XbdPzvP: { opacity: 0.5 } }, ...addPropertyOverrides({ "Y9pcKf3kn-hover": { "data-framer-name": void 0 }, z1XbdPzvP: { "data-framer-name": "Unactive" } }, baseVariant, gestureVariant), children: /* @__PURE__ */ _jsx(ComponentViewportProvider, { height: 24, width: "24px", y: (componentViewport?.y || 0) + (8 + ((componentViewport?.height || 40) - 16 - 24) / 2), children: /* @__PURE__ */ _jsx(SmartComponentScopedContainer, { className: "framer-1hrox9y-container", layoutDependency, layoutId: "RnaoLDXTW-container", nodeId: "RnaoLDXTW", rendersWithMotion: true, scopeId: "sn8JDvU5k", children: /* @__PURE__ */ _jsx(stdin_default, { height: "100%", id: "RnaoLDXTW", layoutId: "RnaoLDXTW", style: { height: "100%", width: "100%" }, variant: "NbTzJgBXM", width: "100%" }) }) }) }) }) }) });
});
var css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-iGcoV.framer-9uebt1, .framer-iGcoV .framer-9uebt1 { display: block; }", ".framer-iGcoV.framer-1b1e2q5 { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: visible; padding: 8px; position: relative; width: min-content; }", ".framer-iGcoV .framer-1hrox9y-container { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 24px); position: relative; width: 24px; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-iGcoV.framer-1b1e2q5 { gap: 0px; } .framer-iGcoV.framer-1b1e2q5 > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-iGcoV.framer-1b1e2q5 > :first-child { margin-left: 0px; } .framer-iGcoV.framer-1b1e2q5 > :last-child { margin-right: 0px; } }"];
var Framersn8JDvU5k = withCSS(Component, css, "framer-iGcoV");
var stdin_default2 = Framersn8JDvU5k;
Framersn8JDvU5k.displayName = "Return date button";
Framersn8JDvU5k.defaultProps = { height: 40, width: 40 };
addPropertyControls(Framersn8JDvU5k, { variant: { options: ["Y9pcKf3kn", "z1XbdPzvP"], optionTitles: ["Active", "Unactive"], title: "Variant", type: ControlType.Enum }, UrHpEVdQk: { title: "Click", type: ControlType.EventHandler } });
addFonts(Framersn8JDvU5k, [{ explicitInter: true, fonts: [] }, ...IconCalendarFonts], { supportsExplicitInterCodegen: true });

export {
  stdin_default2 as stdin_default
};
