// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 28f3299f349ba0ff "Sense View Web App", do not edit manually */
import {
  Icon
} from "./chunk-BTSBQWPZ.js";

// /:https://framerusercontent.com/modules/bKqX3J9FMSIiXPnzZCjM/31opE0D7eflAgWS4AyPO/Z0pjRCDGT.js
import { jsx as _jsx } from "react/jsx-runtime";
import { addFonts, addPropertyControls, ComponentViewportProvider, ControlType, cx, getFonts, SmartComponentScopedContainer, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var PhosphorFonts = getFonts(Icon);
var cycleOrder = ["HKh2JQYp4", "i3nILziaW"];
var serializationHash = "framer-kJdPP";
var variantClassNames = { HKh2JQYp4: "framer-v-aw2dst", i3nILziaW: "framer-v-ivhfb5" };
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach((variant) => variant && Object.assign(nextOverrides, overrides[variant]));
  return nextOverrides;
}
var transition1 = { bounce: 0.2, delay: 0, duration: 0.4, type: "spring" };
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition = value ?? config.transition;
  const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)]);
  return /* @__PURE__ */ _jsx(MotionConfigContext.Provider, { value: contextValue, children });
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = { Close: "HKh2JQYp4", Open: "i3nILziaW" };
var getProps = ({ click, height, id, width, ...props }) => {
  return { ...props, gzb6QPspV: click ?? props.gzb6QPspV, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "HKh2JQYp4" };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency) return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  const fallbackRef = useRef(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React.useId();
  const { activeLocale, setLocale } = useLocaleInfo();
  const componentViewport = useComponentViewport();
  const { style, className, layoutId, variant, gzb6QPspV, ...restProps } = getProps(props);
  const { baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants } = useVariantState({ cycleOrder, defaultVariant: "HKh2JQYp4", ref: refBinding, variant, variantClassNames });
  const layoutDependency = createLayoutDependency(props, variants);
  const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant);
  const onTapesjd51 = activeVariantCallback(async (...args) => {
    setGestureState({ isPressed: false });
    if (gzb6QPspV) {
      const res = await gzb6QPspV(...args);
      if (res === false) return false;
    }
  });
  const sharedStyleClassNames = [];
  const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
  return /* @__PURE__ */ _jsx(LayoutGroup, { id: layoutId ?? defaultLayoutId, children: /* @__PURE__ */ _jsx(Variants, { animate: variants, initial: false, children: /* @__PURE__ */ _jsx(Transition, { value: transition1, children: /* @__PURE__ */ _jsx(motion.div, { ...restProps, ...gestureHandlers, className: cx(scopingClassNames, "framer-aw2dst", className, classNames), "data-framer-name": "Close", "data-highlight": true, layoutDependency, layoutId: "HKh2JQYp4", onTap: onTapesjd51, ref: refBinding, style: { backgroundColor: "var(--token-828d2e70-a56c-46d5-8a2d-e13e496f49c8, rgb(242, 242, 242))", borderBottomLeftRadius: 40, borderBottomRightRadius: 40, borderTopLeftRadius: 40, borderTopRightRadius: 40, ...style }, ...addPropertyOverrides({ i3nILziaW: { "data-framer-name": "Open" } }, baseVariant, gestureVariant), children: /* @__PURE__ */ _jsx(ComponentViewportProvider, { children: /* @__PURE__ */ _jsx(SmartComponentScopedContainer, { className: "framer-15gb8f5-container", isAuthoredByUser: true, isModuleExternal: true, layoutDependency, layoutId: "XceW4NYLl-container", nodeId: "XceW4NYLl", rendersWithMotion: true, scopeId: "Z0pjRCDGT", children: /* @__PURE__ */ _jsx(Icon, { color: "var(--token-48c95b4e-44f6-4ac3-b044-c0cab34489dd, rgb(33, 33, 33))", height: "100%", iconSearch: "", iconSelection: "X", id: "XceW4NYLl", layoutId: "XceW4NYLl", mirrored: false, selectByList: true, style: { height: "100%", width: "100%" }, weight: "light", width: "100%", ...addPropertyOverrides({ i3nILziaW: { iconSelection: "ListBullets" } }, baseVariant, gestureVariant) }) }) }) }) }) }) });
});
var css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-kJdPP.framer-cucfcc, .framer-kJdPP .framer-cucfcc { display: block; }", ".framer-kJdPP.framer-aw2dst { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 4px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }", ".framer-kJdPP .framer-15gb8f5-container { flex: none; height: 24px; position: relative; width: 24px; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-kJdPP.framer-aw2dst { gap: 0px; } .framer-kJdPP.framer-aw2dst > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-kJdPP.framer-aw2dst > :first-child { margin-left: 0px; } .framer-kJdPP.framer-aw2dst > :last-child { margin-right: 0px; } }"];
var FramerZ0pjRCDGT = withCSS(Component, css, "framer-kJdPP");
var stdin_default = FramerZ0pjRCDGT;
FramerZ0pjRCDGT.displayName = "Open List";
FramerZ0pjRCDGT.defaultProps = { height: 32, width: 32 };
addPropertyControls(FramerZ0pjRCDGT, { variant: { options: ["HKh2JQYp4", "i3nILziaW"], optionTitles: ["Close", "Open"], title: "Variant", type: ControlType.Enum }, gzb6QPspV: { title: "Click", type: ControlType.EventHandler } });
addFonts(FramerZ0pjRCDGT, [{ explicitInter: true, fonts: [] }, ...PhosphorFonts], { supportsExplicitInterCodegen: true });

export {
  stdin_default
};
